#!/bin/bash

# Retrieve script arguments
NUM_WORKERS=$1                  # Number of container workers
APP_IMAGE_NAME=$2               # Application image name. With username: 'john123/my-app'
ABS_CONTEXT=$3                  # Absolute path where the context dir is located. This must be specified by the app-image provider.
COMPUTING_UNITS=$4
MEMORY=$5
COMPSS_MASTER_HOSTNAME=$6
CREATION_TIME=$7
MIN_VMS=$8
MAX_VMS=$9
shift 9
RUNCOMPSS_ARGS=$*     # From here on, the typical runcompss parameters you would use
#
# This will include: creating the xml's inside master container, executing runcompss, and shutting down workers.
#
MASTER_COMMAND=""
CLOUD="False"
if [ ${MAX_VMS}  -gt 0 ]; then
  CLOUD="True"
fi

# Create project and resources
MASTER_COMMAND="${MASTER_COMMAND} /opt/COMPSs/Runtime/scripts/system/kubernetes/generate_k8s_resources.sh $ABS_CONTEXT/resources.xml $NUM_WORKERS $COMPUTING_UNITS $MEMORY $COMPSS_MASTER_HOSTNAME $APP_IMAGE_NAME $CLOUD $CREATION_TIME ; "
MASTER_COMMAND="${MASTER_COMMAND} /opt/COMPSs/Runtime/scripts/system/kubernetes/generate_k8s_project.sh $ABS_CONTEXT/project.xml $NUM_WORKERS $APP_IMAGE_NAME $MIN_VMS $MAX_VMS ; "

# Add their path to the runcompss args
RUNCOMPSS_ARGS=" --resources=$ABS_CONTEXT/resources.xml $RUNCOMPSS_ARGS"
RUNCOMPSS_ARGS=" --project=$ABS_CONTEXT/project.xml  $RUNCOMPSS_ARGS"
RUNCOMPSS_ARGS=" --master_name=master $RUNCOMPSS_ARGS"
# Execute the runcompss command itself, from the context directory
MASTER_COMMAND="${MASTER_COMMAND} cd ${ABS_CONTEXT}; sleep 60 ; /opt/COMPSs/Runtime/scripts/user/runcompss $RUNCOMPSS_ARGS 2>&1;"

# After the execution ends, stop all the workers. This is, stop their sshd
# Concatenating with ; to ALWAYS shutdown nodes even if the above commands fail
for i in $(seq 1 "$NUM_WORKERS"); do
    MASTER_COMMAND="${MASTER_COMMAND} ssh -o StrictHostKeyChecking=no worker${i} \"pkill sshd\" ;"
done
  
MASTER_COMMAND="${MASTER_COMMAND} sleep 60;  exit 0"
#
# Now, we are going to create the Kubernetes Deployments file.
# One deployment for the master with 1 replica,
# and one deployment for workers with NUM_WORKER_CONTAINERS replicas
#

echo -e "\
## Master Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: master
  namespace: compss-${IMG_WITHOUT_TAG}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: compss
      node: master
  template:
    metadata:
      labels:
        app: compss
        node: master
    spec:
      containers:
      - name: master
        image: ${APP_IMAGE_NAME}
        command: [ \"/bin/bash\", \"-c\", \"${MASTER_COMMAND}\" ]
        ports:
          - containerPort: 22
            name: master-port
"

echo -e "\
## Master Service
---
apiVersion: v1
kind: Service
metadata:
  name: master
  namespace: compss-${IMG_WITHOUT_TAG}
spec:
  selector:
    node: master
  ports:
  - name: port-22
    protocol: TCP
    port: 22
    targetPort: master-port
"

for i in $(seq 1 "${NUM_WORKERS}"); do
  echo -e "\
## Worker Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker$i
  namespace: compss-${IMG_WITHOUT_TAG}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: compss
      node: worker$i
  template:
    metadata:
      labels:
        app: compss
        node: worker$i
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: node
                operator: In
                values:
                - worker
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: worker
        image: ${APP_IMAGE_NAME}
        command:
          - "/bin/bash"
          - "-c"
          - "/usr/sbin/sshd -D"
        resources:
          limits:
            memory: ${MEMORY}G
            cpu: ${COMPUTING_UNITS}
        ports:
          - containerPort: 22
            name: worker$i-port

---
apiVersion: v1
kind: Service
metadata:
  name: worker$i
  namespace: compss-${IMG_WITHOUT_TAG}
spec:
  selector:
    node: worker$i
  ports:
  - name: port-22
    protocol: TCP
    port: 22
    targetPort: worker$i-port
"
done