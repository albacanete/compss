#!/bin/bash -e

#
# SCRIPT CONSTANTS
#
GENERATORS_DIR=$(dirname "$0")/../system/kubernetes/
GENERATE_DEPLOYMENT_YML="$GENERATORS_DIR/generate-pods-yml"
DEFAULT_MEM=4
DEFAULT_CU=1
DEFAULT_ELASTIC=0
# TODO:  This command is needed when implementing elasticity and the cloud connector
# I assume that, for now, Cloud=False always in the resources file
COMPSS_MASTER_HOSTNAME="none"

#
# HELPER FUNCTIONS
#
source "$GENERATORS_DIR/aux_functions.sh"

showHelp() {
  echo -e "
::::::::::::::: [  RUNCOMPSS-K8S  -  HELP  ] ::::::::::::::::::::::

First of all, remember that in order to use runcompss-k8s you must have a working Kubernetes cluster,
and you need to have installed and configured in this computer the kubectl CLI.

Usage: $0
            --worker-containers=N
            --image-name=\"DOCKERHUB_USER/IMG-NAME\"
			[rest of classic runcompss args]

Example: $0
            --worker-containers=5
            --image-name='compss-user-dockerhub/my-app:1.3'
            --classpath=/home/compss-user/my-app-dir/my-app.jar # Here begin classic runcompss arguments...
            -d
            myPackage.MyApp 3 15


MANDATORY ARGUMENTS:

    --w, --worker-containers:  Specify the number of worker containers the app will execute on.
                               One more container will be created to host the master.
                               Example: --worker-containers=2

    --i, --image-name:         Specify the image name of the application image in Dockerhub. Remember you must generate this with runcompss-docker-gen-image.
                               Remember as well that the format must be: \"DOCKERHUB_USERNAME/APP_IMAGE_NAME:TAG\" (the :TAG is optional).
                               Example: --image-name='john123/my-compss-application:1.9'

    --c, --context-dir:        Specify the absolute application context directory inside the image.
	            		       When using an application image, its provider must give you this information.
                               Example: --context-dir='/home/compss-user/my-app-dir'

OPTIONAL ARGUMENTS:

    --c-cpu-units:             Specify the number of CPU units used by each container (default value is $DEFAULT_CU).
                               Example: --c-cpu-units=16

    --c-memory:                Specify the physical memory used by each container in GB (default value is $DEFAULT_MEM GB).
                               Example: --c-memory=32  # (each container will use 32 GB)

    --c-creation-time:         Time required to create a Kubernetes Pod (default: 60 sec)
                               Example: --c-creation-time=12

    --c-elasticity:            Number of worker Pods to run on the Kubernetes cluster (default: $DEFAULT_ELASTIC)


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
"
}

# Get the name of the master Pod
get_master_pod_name(){
    MASTER_POD_NAME=$(kubectl -n compss-${IMG_WITHOUT_TAG} get pods -l app=master -o jsonpath='{.items[0].metadata.name}')
    echo "COMPSs master Pod name: $MASTER_POD_NAME"    
}   

# Get the status of the master Pod
get_worker_status(){
    wait_before=$1
    if [ -n ${wait_before} ]; then
      sleep ${wait_before}
    fi 

    WORKER_POD_STATUS=$(kubectl -n compss-${IMG_WITHOUT_TAG} get pods worker1 -o=jsonpath='{.status.phase}')
    # WORKER_POD_STATUS=$(kubectl get pods worker1 -o=jsonpath='{.status.phase}')
    echo "COMPSs worker Pod status: $WORKER_POD_STATUS"
}

retrieve_results() {
    cd "${TMP_DIR}/.."

    ECHO "Retrieving results from the master Pod..."

    # Copying results from master container to this machine... (docker cp)
    #IMG_NAME_WITHOUT_USERNAME="$(echo "$IMAGE_NAME" | sed -e 's|[A-Za-z0-9_]*/||g')"
    RESULTS_DIR="./${IMG_NAME_WITHOUT_USERNAME}-results"
    DEBUG_DIR="$RESULTS_DIR/debug"
    
    rm -rf "$RESULTS_DIR" &> /dev/null
    mkdir -p "$DEBUG_DIR"
  
    # Get results
    # kubectl cp "master:/root/.COMPSs"  "${DEBUG_DIR}" # &> /dev/null
    kubectl -n compss-${IMG_WITHOUT_TAG} cp "master:/root/.COMPSs"  "${DEBUG_DIR}" # &> /dev/null
    ASSERT "Results could not be retrieved...Master Pod unreachable"
    
    # Get logs from the master Pod
    kubectl -n compss-${IMG_WITHOUT_TAG} logs master 1> "${RESULTS_DIR}"/application_log.out 2>"${RESULTS_DIR}"/application_log.err
    # kubectl logs master 1> "${RESULTS_DIR}"/application_log.out 2>"${RESULTS_DIR}"/application_log.err
    
    # Move .COMPSs contents and remove the .COMPSs directory
    # mv "${DEBUG_DIR}"/.COMPSs/* "${DEBUG_DIR}"
    # rm -rf "${DEBUG_DIR}"/.COMPSs

    echo ; ECHO "Results successfully retrieved!" ; echo
    ECHO "Check the application results in '$RESULTS_DIR'"
    ECHO "In case you had debug enabled, check: '$DEBUG_DIR'"
    echo
}


#
# MAIN
#

ALL_ARGS=( "$@" )
COMPUTING_UNITS="$DEFAULT_CU"
MEMORY="$DEFAULT_MEM"
CREATION_TIME=60
MIN_VMS=0
MAX_VMS="$DEFAULT_ELASTIC"
RUNCOMPSS_ARGS="$*" # this loop will strip from RUNCOMPSS_ARGS all the runcomps-docker args

# Retrieve parameters
for ARG in "${ALL_ARGS[@]}"; do
    argName="$(echo "$ARG" | cut -c 3- | cut -d= -f1)"
    argValue="$(echo "$ARG" | cut -d= -f2)"

    RD_GOOD_ARG=0
    if [ "$argName" = "worker-containers" ] || [ "$argName" = "w" ]; then
        if echo "$argValue" | grep -q -E "^[1-9][0-9]{0,}$"; then
            NUM_WORKER_PODS="$argValue"
            RD_GOOD_ARG=1
        else
            ERROR "The --worker-containers argument must be a number >= 1. It's the number of worker containers that runcompss docker will spread across nodes (without taking into account the master container)."
        fi
    elif [ "$argName" = "image-name" ] || [ "$argName" = "i" ]; then
    	IMAGE_NAME="$argValue"
        RD_GOOD_ARG=1
    elif [ "$argName" = "context-dir" ] || [ "$argName" = "c" ]; then
        ABS_CONTEXT="$argValue"
        RD_GOOD_ARG=1
    elif [ "$argName" = "c-cpu-units" ]; then
        COMPUTING_UNITS="$argValue"
        RD_GOOD_ARG=1
    elif [ "$argName" = "c-memory" ]; then
        MEMORY="$argValue"
        RD_GOOD_ARG=1
    elif [ "$argName" = "c-creation-time" ]; then
        CREATION_TIME="$argValue"
        RD_GOOD_ARG=1
    elif [ "$argName" = "c-elasticity" ]; then
        MAX_VMS="$argValue"
        RD_GOOD_ARG=1
    fi

    if [ "$RD_GOOD_ARG" = "1" ]; then
         # strip it from ALL_ARGS
        RUNCOMPSS_ARGS=$(echo "$RUNCOMPSS_ARGS" | sed "s|${ARG}||g")
    fi
done

# Log parameters
ECHO "Execution summary -----------------"
ECHO "Contatiner CPU units:     $COMPUTING_UNITS"
ECHO "Container memory:         $MEMORY GB"
ECHO "Image name:               $IMAGE_NAME"
ECHO "Number of workers:        $NUM_WORKER_PODS"
ECHO "Context directory:        $ABS_CONTEXT"
ECHO "Creation time:            $CREATION_TIME"
ECHO "Elastic Pods:             $MAX_VMS"
ECHO "-----------------------------------"
ECHO ""

# Check parameters
if [ -z "$1" ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]
then
    showHelp
    exit 2
fi

# If any required argument is missing, the ALL_GOOD variable is set to 0
ALL_GOOD=1
if [ -z "$NUM_WORKER_PODS" ]; then
    ERROR "Indicate the number of workers before runcompss args ('--worker-containers=3' for example)"
    ALL_GOOD=0
fi

if [ -z "$IMAGE_NAME" ]; then
    ERROR "Indicate the image name. ('--image-name=compss-user/my-app-image' for example)."
    ALL_GOOD=0
fi

if [ -z "$ABS_CONTEXT" ]; then
    ERROR "Indicate the absolute context directory. Remember that the provider of this image must give you this information. ('--context-dir='/home/john123/apps/compss-app' for example)"
    ALL_GOOD=0
fi

# Required argument missing
if [ "$ALL_GOOD" = "0" ]; then
    echo
    ECHO "Run 'runcompss-k8s --help' if you need help."
    echo
    exit 1
fi

IMG_NAME_WITHOUT_USERNAME="$(echo "$IMAGE_NAME" | sed -e 's|[A-Za-z0-9_]*/||g'| sed -e 's|[:.]|_|g')"
IMG_WITHOUT_TAG="$(echo "$IMAGE_NAME" | awk -F'[:/]' '{print $2}')"

# Regular workflow
# The temporary directory for generating the Kubernetes YAML files
TMP_DIR="$PWD/${IMG_NAME_WITHOUT_USERNAME}-yml"
rm -rf "$TMP_DIR" &> /dev/null
mkdir "$TMP_DIR" &> /dev/null

ECHO "Generating deployments.yml file into '${TMP_DIR}' ..." ; echo
 
# Generate Kubernetes deployments YAML file
$GENERATE_DEPLOYMENT_YML "$NUM_WORKER_PODS" "$IMAGE_NAME" "$ABS_CONTEXT" "$COMPUTING_UNITS" "$MEMORY" "$COMPSS_MASTER_HOSTNAME" "$CREATION_TIME" "$MIN_VMS" "$MAX_VMS" "$RUNCOMPSS_ARGS" > "${TMP_DIR}"/deployments.yml
ASSERT "There was an error creating the Kubernetes deployments YAML file."
echo 
sleep 2

# Add a trap for results retrieval
trap "retrieve_results ; exit 1" SIGINT ERR

ECHO "Cleaning environment from previous executions..." ; echo

# Delete existing master and workers deployments 
# do not terminate the script if they did not exist
kubectl delete namespace compss-${IMG_WITHOUT_TAG} || true
#ASSERT "There was an error cleaning the environment from previous executions."
echo
sleep 2

ECHO "Executing application in Kubernetes cluster..." ; echo

# Create specific namespace in kubernetes
kubectl create namespace compss-${IMG_WITHOUT_TAG} || true

# Create storage class local-path for workers
# kubectl apply -f kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml

# Deploy compss deployments and service
kubectl apply -f ${TMP_DIR}/deployments.yml
ASSERT "There was an error executing the application. Check the logs or the deployment output."
echo
sleep 5

ECHO "Waiting application to finish..."
get_worker_status 5
while [[ "${WORKER_POD_STATUS}" == "Running" ]]; do
	get_worker_status 5
done
ECHO "Application finished!"

# Get results
retrieve_results

ECHO "Cleaning environment from the execution..." ; echo
kubectl delete namespace compss-${IMG_WITHOUT_TAG}
# ASSERT "There was an error cleaning the environment from the executions."

exit 0